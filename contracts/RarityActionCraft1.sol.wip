// SPDX-License-Identifier: MPL-2.0
pragma solidity 0.8.7;

contract RarityActionCraft1 {

    // TODO: maybe just put craft on another contract
    function craft(uint[] calldata summoners, uint mats_summoner, uint gold_summoner, uint8 _base_type, uint8 _item_type, uint _crafting_materials) external {
        // we require a delegate call so that we don't have to transfer summoners around
        bool transfer_summoner = address(this) == original;

        // since we are delegatecall-only, these checks aren't needed
        // requireAuthSummoner(mats_summoner);
        // if (gold_summoner != mats_summoner) {
        //     requireAuthSummoner(gold_summoner);
        // }

        // TODO: https://github.com/andrecronje/rarity/issues/71

        bool use_crafting_mats = _crafting_materials > 0;
        // TODO: store this in an immutable on RarityCommon
        uint craft_summoner_id = RARITY_CRAFT_1.SUMMMONER_ID();

        uint length = summoners.length;
        for (uint i = 0; i < length; i++) {
            requireAuthSummoner(summoners[i]);

            (bool crafted,, uint cost,) = RARITY_CRAFT_1.simulate(summoners[i], _base_type, _item_type, _crafting_materials);

            if (crafted) {
                if (transfer_summoner) {
                    RARITY.safeTransferFrom(msg.sender, address(this), summoners[i]);
                }

                if (use_crafting_mats) {
                    RARITY_CRAFT_MATS_1.transfer(mats_summoner, summoners[i], _crafting_materials);
                    RARITY_CRAFT_MATS_1.approve(summoners[i], craft_summoner_id, _crafting_materials);
                }

                RARITY_GOLD.transfer(gold_summoner, summoners[i], cost);
                RARITY_GOLD.approve(summoners[i], craft_summoner_id, cost);

                RARITY.approve(address(RARITY_CRAFT_1), summoners[i]);
                RARITY_CRAFT_1.craft(summoners[i], _base_type, _item_type, _crafting_materials);

                if (transfer_summoner) {
                    RARITY.safeTransferFrom(address(this), msg.sender, summoners[i]);
                }
            }
        }
    }
}